########################################################################
## Problem statement: Sudoku is a number-placement puzzle.            ##
## The objective is to fill a 9 × 9 grid with numbers in such         ##
## a way that each column, each row, and each of the nine 3 × 3       ##
## sub-grids that compose the grid all contain all of the numbers     ##
## from 1 to 9 one time. Implement an algorithm that will check       ##
## whether the given grid of numbers represents a valid Sudoku puzzle ##
## according to the layout rules described above. Note that the       ##
## puzzle represented by grid does not have to be solvable.           ##
########################################################################

def sudoku2(grid):
    # this block checks the 3x3 subgrids for duplicate numbers
    if(len(is_set(subgrid(0,0,grid))) != 9 or len(is_set(subgrid(0,3,grid))) != 9 or len(is_set(subgrid(0,6,grid))) != 9 or len(is_set(subgrid(3,0,grid))) != 9 or len(is_set(subgrid(3,3,grid))) != 9 or len(is_set(subgrid(3,6,grid))) != 9 or len(is_set(subgrid(6,0,grid))) != 9 or len(is_set(subgrid(6,3,grid))) != 9 or len(is_set(subgrid(6,6,grid))) != 9): return False
    
    # this block checks the rows/columns for duplicate numbers
    for i in range(len(grid)):
            temp1 = []
            temp2 = []
            for j in range(len(grid)):
                temp1.append(grid[i][j])
                temp2.append(grid[j][i])
            if(len(is_set(temp1)) != 9 or len(is_set(temp2)) != 9): return False
    return True
            
def subgrid(x, y, grid):
    temp = []
    for i in range(x,x+3):
        for j in range(y,y+3):
            temp.append(grid[i][j])
    return temp

def is_set(subgrid):
    a = []
    for i in subgrid:
        if i not in a and i != '.':
            a.append(i)
        if i == '.':
            a.append(i)
    return a
